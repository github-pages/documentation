<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
                         "concept.dtd">
<!-- Copyright FUJITSU LIMITED 2017 -->
<concept id="concept2311" xml:lang="en-us">
    <title><ph
                conref="../../Shared/Product_Name.xml#ProductNameTopic/Product_Abbr"/> in SUSE OpenStack Cloud</title>
    <conbody>
        <p><ph
                        conref="../../Shared/Product_Name.xml#ProductNameTopic/Product_Abbr"/> is installed as a workload in the SUSE Openstack Cloud (SOC). </p>
        <p>The OSCM installation on SOC consists of the following main steps: </p>
        <p>
            <ul>
                <li>Create OpenStack resources for <ph conref="../../Shared/Product_Name.xml#ProductNameTopic/Product_Abbr"/></li>
                <li>Pull Docker images (oscm, app and database) from specified repository, configure and run containers. </li>
            </ul>
        </p>
        <p>OpenStack Resources for OSCM</p>
        <p>The following resources are created in OpenStack: </p>
        <p>oscm project </p>
        <p>oscm user (with corresponding roles)</p>
        <p>oscm.medium flavor </p>
        <p>oscm keypair </p>
        <p>oscm stack with 2 cinder volumes (for database and application data - config, logs) </p>
        <p>oscm stack with 1 instance with the 2 cinder volumes attachments (virtual machine based on SLES where oscm docker containers will run) </p>
        <p>Both stacks are created with using heat templates (can be found in the crowbar-openstack code). </p>
        <p><codeblock>crowbar-openstack/chef/cookbooks/oscm/files/default/volumes.yaml 
crowbar-openstack/chef/cookbooks/oscm/files/default/applications.yaml </codeblock>The Docker part (pull, configure, start containers) runs via cloud init on the first start of the instance (VM). The scripts can be found at the following location: </p>
        <p><codeblock>crowbar-openstack/chef/cookbooks/oscm/files/default/user-data</codeblock> The other resources mentioned are created in the chef recipe of the oscm barclamp: </p>
        <p><codeblock>crowbar-openstack/chef/cookbooks/oscm/recipes/server.rb </codeblock>Tip: Locate all oscm barclamp code in the crowbar-framework search for string "oscm" </p>
        <p><b>OSCM Passwords</b>
        </p>
        <p>There are 3 different layers where we deal with OSCM passwords: </p>
        <p>OpenStack: user "oscm" with password "oscm". Can be changed by the OSCM operator in Horizon dashboard or with command line client from OpenStack. </p>
        <p>Glassfish admin credentials (user: "oscm", password: generated from openstack), Glassfish keystores (password generated by openstack), Postgres (user "postgres", password: generated from openstack) </p>
        <p>OSCM applicaltion (platform operator user: "administrator", password: "admin123"). </p>
        <p>The passwords for the glassfish and postgres are random strings, found as resource in the stack. They are generated, because otherwise they will be visible on the Horizon dashboard by stack overview. </p>
        <p>They are displayed as stack resource of type OS::Heat::RandomString. </p>
        <p>The value of the password can be shown on command line on controller node (be sure to use environment for oscm - oscm project and user). The following example shows the resource "as_admin_password" from the stack "oscm-instances" displayed also on the picture bellow. </p>
        <p><codeblock>openstack stack resource show -f shell oscm-instances as_admin_password</codeblock>Output can be as following (the value of the password is 2lkXaVAZbsTbbgZmkdrGjy8WXrcvRXwG).</p>
        <p><codeblock>attributes="{u'value': u'2lkXaVAZbsTbbgZmkdrGjy8WXrcvRXwG'}" 
creation_time="2017-04-18T07:56:24Z" 
description="" links="[{u'href': u'http://192.168.53.2:8004/v1/df18d51e5f684ee0873acd69bb6426b4/stacks/oscm-instances/4be28201-e638-47c4-b092-c8745e2809ac/resources/as_admin_password', u'rel': u'self'}, {u'href': u'http://192.168.53.2:8004/v1/df18d51e5f684ee0873acd69bb6426b4/stacks/oscm-instances/4be28201-e638-47c4-b092-c8745e2809ac', u'rel': u'stack'}]"
logical_resource_id="as_admin_password" 
physical_resource_id="oscm-instances-as_admin_password-d4ezt64jm67x" 
required_by="[u'user_data_params']" 
resource_name="as_admin_password" 
resource_status="CREATE_COMPLETE" 
resource_status_reason="state changed" resource_type="OS::Heat::RandomString" 
updated_time="2017-04-18T07:56:24Z"</codeblock> [[!StackResources.PNG!]] [Click to start editing] </p>
        <p><b>SSL Encryption</b></p>
        <p>OSCM uses https for communication but also for client authentication (APP). [[!ssl.png!]] </p>
        <p>The default s1as certificates of oscm and app domains are used for the https between the containers. From security point of view it is acceptable, since it is not public network. Nevertheless, the s1as certificates are generated for each container installation (otherwise each OSCM container in the world would use the same certificates!) This is done in scripts for cloud init. </p>
        <p>For the web part, the cloud administrator can choose if http or https is required at installation time. In case of https, it has a possibility to specify secure certificates (not self-signed s1as that the scripts generate). </p>
        <p>In the development/test environment we are using the floating IP for accessing the web part of OSCM. In production environment, there are domain names, for which also the secure certificates are signed (CN=&lt;domain name&gt;). </p>
        <p>Since APP uses the client_auth for SOAP with certificates, the CN in the certificate must match the app host name (it is specified to be "app" docker host, for oscm the docker host is "web"). This means the secure certificates with real domain name cannot be used for the https for SOAP. </p>
        <p>So separate http listeners by glassfish server will be used for SOAP with s1as as certificate (at least for APP), and if secure certificates used for web, this certificate will be applied for the http listeners for web part. </p>
        <p>It can be configurated in domain.xml -&gt; secure http listener, cert-nick). </p>
        <p>However SOAP API is also public as the UI, but for now there is no plan for some SOAP integration in SUSE environment.</p>
    </conbody>
</concept>
