<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xml:lang="en-us" lang="en-us">
<head>
<meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
<meta name="copyright" content="(C) Copyright 2005" />
<meta name="DC.rights.owner" content="(C) Copyright 2005" />
<meta content="task" name="DC.Type" />
<meta name="DC.Title" content="Implementing a Service Controller" />
<meta content="XHTML" name="DC.Format" />
<meta content="task_E68E2024B1F6403AAA1130A39B1D4DCD" name="DC.Identifier" />
<meta content="en-us" name="DC.Language" />
<link href="../../commonltr.css" type="text/css" rel="stylesheet" />
<link href="../../book.css" type="text/css" rel="stylesheet" />
<title>Implementing a Service Controller</title>
</head>
<body id="task_E68E2024B1F6403AAA1130A39B1D4DCD">


    <h1 class="topictitle1">Implementing a Service Controller</h1>

    <div>
        <div class="section">
            <p>For each application to be integrated with <span>OSCM</span> by means of APP, you need to implement a service controller using the APP API. </p>

            <p>The API includes two interfaces for implementing a service controller, the <samp class="codeph">APPlatformController</samp> and the <samp class="codeph">APPlatformService</samp> interface. The <samp class="codeph">APPlatformController</samp> interface provides the methods required to access an application which is to be integrated with the subscription management of <span>OSCM</span>. The <samp class="codeph">APPlatformService</samp> interface provides the methods by which service controllers implemented in APP can access common APP utilities. A detailed documentation of the API is provided as Javadoc with the APP integration package (<samp class="codeph">oscm-integration-app-pack.zip</samp>). </p>

            <p>The service controller sample included in the integration package is a fully functional implementation of a service controller. The following packages also include ready-to-use service controllers: </p>

            <div class="p">
                <ul>
                    
                    <li><samp class="codeph">oscm-aws-install-pack.zip</samp>: <p>Can be used for integrating the Amazon Elastic Compute Cloud Web service with <span>OSCM</span>.</p>
</li>

                    <li><samp class="codeph">oscm-openstack-install-pack.zip</samp>: <p>Can be used for integrating OpenStack services with <span>OSCM</span>.</p>
</li>

                    
                    <li><samp class="codeph">oscm-vmware-install-pack.zip</samp>: <p>Can be used for integrating virtual machines provisioned on a VMware vSphere server through services with <span>OSCM</span>.</p>
</li>

                </ul>

            </div>

            <p>To implement a service controller, you need to perform the following steps:</p>

        </div>

        <ul><li class="stepexpand">
                <span>Identify the API of the application which is to be integrated. </span>
            </li>
<li class="stepexpand">
                <span>Define the data which are to be persisted by APP. </span>
                 
                    <p>This includes all settings required during the provisioning process (e.g. configuration, target environment, current status etc.). APP can store arbitrary key/value pairs and provide them to the service controller in the subsequent steps.</p>

                
            </li>
<li class="stepexpand">
                <span>Identify the required steps for each of the provisioning operations, and split them into a synchronous and an asynchronous phase. </span>
                 
                    <p>The synchronous phase should not execute long-running commands or communicate with remote systems. Instead, it should perform plausibility checks and parameter validation, for example, determine the necessary actions. All actual provisioning tasks are to be handled in the asynchronous phase by the polling feature. For details on the polling feature, refer to the Javadoc of the APP API.</p>

                
            </li>
<li class="stepexpand">
                <span>Implement all the identified provisioning steps using the appropriate API commands of the application. </span>
            </li>
<li class="stepexpand">
                <span>Optionally, implement some kind of dispatcher that checks the current status and determines the next task to be executed depending on the current provisioning status and the target configuration. </span>
                 
                    <p>The dispatcher can also schedule manual execution steps by switching off the automatic polling by APP. Finally, it signals the completion of the steps to APP. </p>

                
            </li>
<li class="stepexpand">
                <span>Carefully consider the error handling: Decide whether abortion of the process is necessary. In most cases, you can suspend the process and trigger manual steps in error situations. </span>
            </li>
<li class="stepexpand">
                <span>Optionally, identify and implement service operations that users can execute from the <span>OSCM</span> user interface.</span>
            </li>
</ul>

    </div>


</body>
</html>